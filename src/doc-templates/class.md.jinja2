# Class: {{ gen.name(element) }}

{%- if header -%}
{{header}}
{%- endif -%}



{% if element.description %}
_{{ element.description }}_
{% endif %}

{% if element.abstract %}
* __NOTE__: this is an abstract class and should not be instantiated directly
{% endif %}
{% if element.mixin %}
* __NOTE__: this is a mixin class intended to be used in combination with other classes, and not used directly
{% endif %}

URI: {{ gen.uri_link(element) }}


Mermaid diagrams temporarily disabled
<!-- mermaid section would go here -->

{% if schemaview.class_parents(element.name) or schemaview.class_children(element.name, mixins=False) %}

## Inheritance
{{ gen.inheritance_tree(element, mixins=True) }}
{% else %}
<!-- no inheritance hierarchy -->
{% endif %}

## Slots

| Name | Range | Cardinality | Description  |
| ---  | --- | --- | --- |
{% for s in schemaview.class_induced_slots(element.name) -%}
| {{gen.link(s)}} | {{gen.link(s.range)}} | {{ gen.cardinality(s) }} | {{ s.description }}  |
{% endfor %}


## Denoters & Linkers

| Slot | Source_schema  |
| ---  | --- |
{% for s in schemaview.class_induced_slots(element.name) -%}
| {{gen.link(s)}} | {{ s.from_schema }}  |
{% endfor %}

| Slot | Source_schema |
| --- | ---  |
{% for s in schemaview.class_induced_slots(element.name) %}
{% if s.identifier or ( s.title and 'identifier' in s.title.lower() ) or (s.title and 'name' in s.title.lower()) %}
| {{ gen.link(s) }} | {{ s.from_schema }} |
{% endif %}
{% endfor %}


## Usages

{% if schemaview.usage_index().get(element.name) %}
| used by class | linking slot | type | used |
| ---  | --- | --- | --- |
{% for usage in schemaview.usage_index().get(element.name) -%}
| {{gen.link(usage.used_by)}} | {{gen.link(usage.slot)}} | {{usage.metaslot}} | {{usage.used }} |
{% endfor %}
{% endif %}

{% include "common_metadata.md.jinja2" %}


{% if element.rules or element.classification_rules %}

## Rules

{% endif %}

{% if schemaview.get_mappings(element.name).items() -%}
## Mappings

| Mapping Type | Mapped Value |
| ---  | ---  |
{% for m, mt in schemaview.get_mappings(element.name).items() -%}
{% if mt|length > 0 -%}
| {{ m }} | {{ mt }} |
{% endif -%}
{% endfor %}

{% endif -%}


## LinkML Specification

### Direct

<details>
```yaml
{{gen.yaml(element)}}
```
</details>

### Induced

<details>
```yaml
{{gen.yaml(element, inferred=True)}}
```
</details>

{%- if footer -%}
{{footer}}
{%- endif -%}