name: Check Pull Request

# Controls when the action will run. Triggers the workflow on pull requests.
on:
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: trigger-check-pull-request
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    #----------------------------------------------
    #          install & configure poetry
    #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1.3
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    #----------------------------------------------
    #               install pandoc
    #----------------------------------------------
    - name: Install pandoc
      run: sudo apt-get install pandoc

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    #----------------------------------------------
    #         build generated artifacts
    #----------------------------------------------
    - name: Make Artifacts
      run: |
        make squeaky-clean
        make target all
        make build-nmdc_schema
        poetry install
#        make clean-artifacts
#        make all


    #----------------------------------------------
    #   validate test data against JSON Schema
    #----------------------------------------------
    - name: Validate JSON Schema
      run: |
        make test-jsonschema
        make test-jsonschema_invalid
       

    #----------------------------------------------
    #   load the python data classes
    #----------------------------------------------
    - name: load the python data classes
      run: |
        make test-dataclasses
